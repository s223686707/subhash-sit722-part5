name: Deploy book_catalog

on:
  push: 
    branches:
      - master
    paths:
      - book_catalog/**

  workflow_dispatch: 

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r book_catalog/requirements.txt
      
      - name: Run tests
        run: |
          pytest -v -s book_catalog/tests/test_main.py

  deploy:
    runs-on: ubuntu-latest
    needs: test

    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW }}
      NAME: book_catalog
      DIRECTORY: book_catalog
      EMAIL_TO: ${{ secrets.EMAIL_TO }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Set permissions for build, push, deploy scripts
        run: |
          chmod +x ./scripts/build-image.sh
          chmod +x ./scripts/push-image.sh
          chmod +x ./scripts/deploy.sh

      - name: Build Docker image
        run: ./scripts/build-image.sh

      - name: Publish Docker image
        run: ./scripts/push-image.sh

      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.24.2

      - name: Deploy to Kubernetes
        run: ./scripts/deploy.sh

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Notify via email
        if: always()
        run: |
          python -c "
          import smtplib
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart

          success = '${{ job.status }}' == 'success'
          
          subject = f'Deployment {'Success' if success else 'Failure'}: book_catalog'
          body = f'Deployment of book_catalog {'succeeded' if success else 'failed'}!'

          message = MIMEMultipart()
          message['From'] = '${{ secrets.EMAIL_FROM }}'
          message['To'] = '${{ secrets.EMAIL_TO }}'
          message['Subject'] = subject
          message.attach(MIMEText(body, 'plain'))

          with smtplib.SMTP('${{ secrets.SMTP_SERVER }}', ${{ secrets.SMTP_PORT }}) as server:
              server.starttls()
              server.login('${{ secrets.SMTP_USER }}', '${{ secrets.SMTP_PASSWORD }}')
              server.send_message(message)
          print('Email notification sent')
          "